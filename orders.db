from flask import Flask, request, jsonify, send_file
import sqlite3
import pandas as pd
import os

app = Flask(__name__)
DB_FILE = "orders.db"

# ---------- DB Setup ----------
def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        client TEXT,
        product TEXT,
        quantity INTEGER
    )''')
    conn.commit()
    conn.close()

def add_order(client, product, quantity):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("INSERT INTO orders (client, product, quantity) VALUES (?, ?, ?)", 
              (client, product, quantity))
    conn.commit()
    conn.close()

def get_orders():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT client, product, quantity FROM orders")
    rows = c.fetchall()
    conn.close()
    return [{"client": r[0], "product": r[1], "quantity": r[2]} for r in rows]

def clear_orders():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("DELETE FROM orders")
    conn.commit()
    conn.close()

# ---------- Routes ----------
@app.route('/send', methods=['POST'])
def send():
    data = request.json
    msg = data.get("message", "").strip().lower()
    replies = []

    if msg == "/clear":
        clear_orders()
        replies.append("✅ Orders cleared.")
    elif msg.startswith("/order"):
        # Example: /order John pizza 2
        parts = msg.split()
        if len(parts) >= 4:
            client = parts[1]
            product = parts[2]
            quantity = int(parts[3])
            add_order(client, product, quantity)
            replies.append(f"✅ Order added: {client} ordered {quantity}x {product}")
        else:
            replies.append("⚠️ Use format: /order <client> <product> <qty>")
    else:
        replies.append(f"Echo: {msg}")

    return jsonify({"replies": replies})

@app.route('/orders', methods=['GET'])
def orders():
    return jsonify(get_orders())

@app.route('/download', methods=['GET'])
def download():
    orders = get_orders()
    if not orders:
        return "No orders yet"

    df = pd.DataFrame(orders)
    file_path = "orders.xlsx"
    df.to_excel(file_path, index=False)

    return send_file(file_path, as_attachment=True)

# ---------- Run ----------
if __name__ == "__main__":
    init_db()
    app.run(debug=True)
